-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.

CREATE TABLE address_hierarchy (

    address_part_id SERIAL PRIMARY KEY,
    parent_id INT,
    address_level INT NOT NULL,
    toponym_type INT NOT NULL,
    address_name TEXT NOT NULL,
    CONSTRAINT fk_self_parent 
    FOREIGN KEY (parent_id) REFERENCES address_hierarchy (address_part_id) 
);


BEGIN;


CREATE TABLE IF NOT EXISTS public.addresses
(
    id integer NOT NULL DEFAULT nextval('addresses_id_seq'::regclass),
    building integer,
    apartment integer,
    CONSTRAINT addresses_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.apartments
(
    id integer NOT NULL DEFAULT nextval('apartments_id_seq'::regclass),
    building integer,
    apartment_number character varying(50) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT apartments_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.buildings
(
    id integer NOT NULL DEFAULT nextval('buildings_id_seq'::regclass),
    street integer,
    full_name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT buildings_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.streets
(
    id integer NOT NULL DEFAULT nextval('streets_id_seq'::regclass),
    settlement integer,
    street_type integer NOT NULL,
    full_name character varying(200) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT streets_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.settlements
(
    id integer NOT NULL DEFAULT nextval('settlements_id_seq'::regclass),
    settlement_area integer,
    settlement_type integer NOT NULL,
    full_name character varying(200) COLLATE pg_catalog."default" NOT NULL,
    district integer,
    CONSTRAINT settlements_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.settlement_areas
(
    id integer NOT NULL DEFAULT nextval('settlement_areas_id_seq'::regclass),
    district integer NOT NULL,
    settlement_area_type integer NOT NULL,
    full_name character varying(200) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT settlement_areas_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.districts
(
    id integer NOT NULL DEFAULT nextval('districts_id_seq'::regclass),
    federal_subject_code integer NOT NULL,
    district_type integer NOT NULL,
    full_name character varying(200) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT districts_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.federal_subjects
(
    code integer NOT NULL,
    subject_type integer NOT NULL,
    full_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT federal_subjects_pkey PRIMARY KEY (code)
);

CREATE TABLE IF NOT EXISTS public.rus_citizenship
(
    id integer NOT NULL DEFAULT nextval('rus_citizenship_id_seq'::regclass),
    passport_number character varying(4) COLLATE pg_catalog."default" NOT NULL,
    passport_series character varying(6) COLLATE pg_catalog."default" NOT NULL,
    surname character varying(100) COLLATE pg_catalog."default" NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    patronymic character varying(100) COLLATE pg_catalog."default",
    legal_address integer NOT NULL,
    CONSTRAINT rus_citizenship_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.students
(
    id integer NOT NULL DEFAULT nextval('students_id_seq'::regclass),
    snils character varying(11) COLLATE pg_catalog."default" NOT NULL,
    inn character varying(12) COLLATE pg_catalog."default" NOT NULL,
    actual_address integer NOT NULL,
    date_of_birth date NOT NULL,
    rus_citizenship_id integer,
    gender integer NOT NULL,
    grade_book_number character varying(10) COLLATE pg_catalog."default" NOT NULL,
    target_education_agreement integer NOT NULL,
    gia_mark integer,
    gia_demo_exam_mark integer,
    paid_education_agreement integer NOT NULL,
    admission_score numeric(5, 3),
    CONSTRAINT students_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.education_tag_history
(
    student_id integer NOT NULL,
    level_code integer NOT NULL
);

CREATE TABLE IF NOT EXISTS public.health_status
(
    id integer NOT NULL DEFAULT nextval('health_status_id_seq'::regclass),
    person_id integer NOT NULL,
    initial_date date,
    end_date date,
    status_type integer NOT NULL,
    health_disorder_type integer NOT NULL,
    CONSTRAINT health_status_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.student_history
(
    student_id integer NOT NULL,
    status_code integer NOT NULL,
    recorded_on date NOT NULL
);

CREATE TABLE IF NOT EXISTS public.scholarship
(
    id integer NOT NULL DEFAULT nextval('scholarship_id_seq'::regclass),
    student_id integer NOT NULL,
    scholarship_type integer NOT NULL,
    initial_date date,
    end_date date,
    CONSTRAINT scholarship_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.student_flow
(
    id integer NOT NULL DEFAULT nextval('student_flow_id_seq'::regclass),
    student_id integer NOT NULL,
    order_id integer NOT NULL,
    group_id_to integer,
    recorded_on timestamp without time zone NOT NULL,
    CONSTRAINT student_flow_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.educational_group
(
    id integer NOT NULL DEFAULT nextval('educational_group_id_seq'::regclass),
    program_id integer NOT NULL,
    course_on integer NOT NULL,
    group_name character varying(20) COLLATE pg_catalog."default" NOT NULL,
    type_of_financing integer NOT NULL,
    form_of_education integer NOT NULL,
    education_program_type integer NOT NULL,
    creation_year integer NOT NULL,
    CONSTRAINT educational_group_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.educational_program
(
    id integer NOT NULL DEFAULT nextval('educational_program_id_seq'::regclass),
    fgos_id character varying(10) COLLATE pg_catalog."default" NOT NULL,
    fgos_name character varying(200) COLLATE pg_catalog."default" NOT NULL,
    speciality_name character varying(200) COLLATE pg_catalog."default" NOT NULL,
    course_count integer NOT NULL,
    speciality_out_education_level integer NOT NULL,
    speciality_in_education_level integer NOT NULL,
    knowledge_depth integer NOT NULL,
    group_prefix character varying(10) COLLATE pg_catalog."default" DEFAULT NULL::character varying,
    group_postfix character varying(10) COLLATE pg_catalog."default" DEFAULT NULL::character varying,
    CONSTRAINT educational_program_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.orders
(
    id integer NOT NULL DEFAULT nextval('orders_id_seq'::regclass),
    specified_date date NOT NULL,
    effective_date date NOT NULL,
    serial_number integer NOT NULL,
    org_id character varying(20) COLLATE pg_catalog."default" NOT NULL,
    type integer NOT NULL,
    name text COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    CONSTRAINT orders_pkey PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS public.addresses
    ADD CONSTRAINT addresses_apartment_fkey FOREIGN KEY (apartment)
    REFERENCES public.apartments (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.addresses
    ADD CONSTRAINT addresses_building_fkey FOREIGN KEY (building)
    REFERENCES public.buildings (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.apartments
    ADD CONSTRAINT apartments_building_fkey FOREIGN KEY (building)
    REFERENCES public.buildings (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.buildings
    ADD CONSTRAINT buildings_street_fkey FOREIGN KEY (street)
    REFERENCES public.streets (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.streets
    ADD CONSTRAINT streets_settlement_fkey FOREIGN KEY (settlement)
    REFERENCES public.settlements (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.settlements
    ADD CONSTRAINT settlements_area_fkey FOREIGN KEY (settlement_area)
    REFERENCES public.settlement_areas (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.settlements
    ADD CONSTRAINT settlements_district_fkey FOREIGN KEY (district)
    REFERENCES public.districts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.settlement_areas
    ADD CONSTRAINT settlement_areas_district_fkey FOREIGN KEY (district)
    REFERENCES public.districts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.districts
    ADD CONSTRAINT districts_federal_subject_code_fkey FOREIGN KEY (federal_subject_code)
    REFERENCES public.federal_subjects (code) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.rus_citizenship
    ADD CONSTRAINT rus_citizenship_legal_address_fkey FOREIGN KEY (legal_address)
    REFERENCES public.addresses (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.students
    ADD CONSTRAINT students_actual_address_fkey FOREIGN KEY (actual_address)
    REFERENCES public.addresses (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.students
    ADD CONSTRAINT students_rus_citizenship_id_fkey FOREIGN KEY (rus_citizenship_id)
    REFERENCES public.rus_citizenship (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.education_tag_history
    ADD CONSTRAINT education_tag_history_student_id_fkey FOREIGN KEY (student_id)
    REFERENCES public.students (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.health_status
    ADD CONSTRAINT health_status_person_id_fkey FOREIGN KEY (person_id)
    REFERENCES public.students (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.student_history
    ADD CONSTRAINT student_history_student_id_fkey FOREIGN KEY (student_id)
    REFERENCES public.students (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.scholarship
    ADD CONSTRAINT scholarship_student_id_fkey FOREIGN KEY (student_id)
    REFERENCES public.students (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.student_flow
    ADD CONSTRAINT student_flow_group_id_to_fkey FOREIGN KEY (group_id_to)
    REFERENCES public.educational_group (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.student_flow
    ADD CONSTRAINT student_flow_order_id_fkey FOREIGN KEY (order_id)
    REFERENCES public.orders (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.student_flow
    ADD CONSTRAINT student_flow_student_id_fkey FOREIGN KEY (student_id)
    REFERENCES public.students (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.educational_group
    ADD CONSTRAINT educational_group_program_id_fkey FOREIGN KEY (program_id)
    REFERENCES public.educational_program (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

END;
